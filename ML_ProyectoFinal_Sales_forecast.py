# -*- coding: utf-8 -*-
"""Sales Forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZIWOCRQ0SnbEtZFHtdzRoZ80iJwcyjhI

Montar a Gooogle Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""Importas Librerías"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from matplotlib.pylab import rcParams
import statsmodels.api as sm

"""Cargar ambas hojas"""

sales_xlsx_box = pd.read_excel('Sales.xlsx', sheet_name= 'BOX')

sales_xlsx_box.head()

sales_xlsx_ol = pd.read_excel('Sales.xlsx', sheet_name= 'OL')

sales_xlsx_ol.head()

sales_xlsx_box.info(), sales_xlsx_ol.info()

"""Transformar Ventas Online a CSV"""

sales_xlsx_ol.to_csv(r'/content/Sales_ol.csv', index = False,  )

sales_ol = pd.read_csv('Sales_ol.csv')

sales_ol.info()

sales_ol.tail()

"""Buscar Nulls o NaNs"""

sales_ol.isna().any().sum(), sales_ol.isnull().any().sum()

"""Remplazar NaNs con Ceros"""

sales_ol = sales_ol.replace(np.nan,0)

"""Buscar Duplicados"""

sales_ol.duplicated().sum()

"""Buscar espacios en blanco"""

sales_ol_filter = sales_ol == " "
sales_ol_filter.any().sum()

sales_ol.isna().any().sum(), sales_ol.isnull().any().sum()

sales_ol.shape

sales_ol.describe()

"""Quitamos las ciudades y el distribuidor"""

sales_ol_only = sales_ol.drop('RID', axis=1)

sales_ol_only = sales_ol_only.drop('CTY', axis=1)

sales_ol_only = sales_ol_only.drop('#UNITS_L12Mo', axis=1)

sales_ol_only = sales_ol_only.drop('#TRANS_L12Mo', axis=1)

"""Igualamos devoluciones a cero"""

sales_ol_only[sales_ol_only < 0] = 0
sales_ol_only.describe()

sales_ol_only.shape

sales_ol_only.T

"""Graficamos"""

rcParams['figure.figsize'] = 15,10

# meanA = sales_ol_only.T.mean()


plt.xlabel('Date')
plt.ylabel('Sales')
plt.plot(sales_ol_only.T)
plt.legend(loc=2)
# plt.plot(meanA, color='black')

####
#model=sm.tsa.statespace.SARIMAX(df[''],order=(1, 0, 0),seasonal_order=(1,1,1,12))
#results=model.fit()

forecast = pd.DataFrame(columns=['Sales', 'Forecast'])
forecast['Sales'] = sales_ol_only.T.mean()

model=sm.tsa.statespace.SARIMAX(sales_ol_only.T.mean(),order=(1, 0, 0),seasonal_order=(1,1,1,12))
results=model.fit()

forecast['Forecast'] = results.predict(start=7459,end=8459,dynamic=True)
forecast[['Sales','Forecast']].plot(figsize=(12,8))


####

'Media Móvil'

rolmean = sales_ol_only.T.rolling(window = 36).mean()
rolstd = sales_ol_only.T.rolling(window = 36).std()
print(rolmean, rolstd)

sales_ol.columns

"""Dividimos por regiones"""

sales_ol['CTY'].unique()

"""Extraemos Argentina"""

Argentina_ol = sales_ol.loc[sales_ol['CTY'] == 'Argentina']
Argentina_ol.tail()

"""Eliminamos la ciudad y el distribuidor"""

Argentina_ol_only = Argentina_ol.drop('CTY', axis=1)
Argentina_ol_only = Argentina_ol_only.drop('RID', axis=1)
Argentina_ol_only = Argentina_ol_only.drop('#UNITS_L12Mo', axis=1)
Argentina_ol_only = Argentina_ol_only.drop('#TRANS_L12Mo', axis=1)
Argentina_ol_only.head()

"""Igualamos las devoluciones a cero ventas"""

Argentina_ol_only[Argentina_ol_only < 0] = 0
Argentina_ol_only.describe()

####
forecast = pd.DataFrame(columns=['Mean', 'Forecast'])
forecast['Mean'] = Argentina_ol_only.T.mean()

model=sm.tsa.statespace.SARIMAX(Argentina_ol_only.T.mean(),order=(1, 0, 0),seasonal_order=(1,1,1,12))
results=model.fit()

forecast['Forecast'] = results.predict(start=403,end=503,dynamic=True)
forecast[['Mean','Forecast']].plot(figsize=(12,8))

forecast['forecast'] = results.predict(start = 504, end = 603, dynamic= True)  
forecast[['Mean', 'forecast']].plot(figsize=(12, 8))

#from pandas.tseries.offsets import DateOffset
#future_dates=[forecast.index[-1]+ DateOffset(months=x)for x in range(0,100)]
#future_datest_forecast=pd.DataFrame(index=future_dates[1:],columns=df.columns)

####

"""Graficamos"""

rcParams['figure.figsize'] = 15,10

meanB = Argentina_ol_only.T.mean()


plt.xlabel('Date')
plt.ylabel('Sales Argentina')
plt.plot(Argentina_ol_only.T)
plt.plot(meanB, color='black')


"""El experto de negocio nos inidica que a partir de septiembre 2018 hubo un cambio de versión y aumento precio"""

Argentina_ol_only.T.head()

Argentina_ol_only.T.tail(700)

"""No parece haber efecto de fin de año..."""

plt.xlabel('Date')
plt.ylabel('Sales Argentina')
plt.plot( Argentina_ol_only.T.loc['2018/09/03':'2019/12/30'] )

"""¿Efecto CORONAVIRUS?"""

plt.xlabel('Date')
plt.ylabel('Sales Argentina')
plt.plot( Argentina_ol_only.T.loc['2019/12/30':'2020/02/29.1'] )

plt.xlabel('Date')
plt.ylabel('Sales Argentina')
plt.plot( Argentina_ol_only.T.loc['2020/01/02.1':'2020/02/29.1'] )

"""Extraemos Brazil"""

Brazil_ol = sales_ol.loc[sales_ol['CTY'] == 'Brazil']

"""Eliminamos distribuidores y país"""

Brazil_ol_only = Brazil_ol.drop('CTY', axis=1)
Brazil_ol_only = Brazil_ol_only.drop('RID', axis=1)
Brazil_ol_only = Brazil_ol_only.drop('#UNITS_L12Mo', axis=1)
Brazil_ol_only = Brazil_ol_only.drop('#TRANS_L12Mo', axis=1)

"""Igualamos las devoluciones a cero"""

Brazil_ol_only[Brazil_ol_only < 0] = 0

"""Graficamos"""

rcParams['figure.figsize'] = 15,10

plt.xlabel('Date')
plt.ylabel('Sales Brazil')
plt.plot( Brazil_ol_only.T.loc['2018/09/03':'2019/12/30'] )

plt.xlabel('Date')
plt.ylabel('Sales Brazil')
plt.plot( Brazil_ol_only.T.loc['2020/01/02.1':'2020/02/29.1'] )

plt.xlabel('Date')
plt.ylabel('Sales Brazil')
plt.plot( Brazil_ol_only.T.loc['2018/09/03':'2020/02/29.1'] )

"""Extraemos el Caribe"""

Caribbean_ol = sales_ol.loc[sales_ol['CTY'] == 'Caribbean Region LATAM']

Caribbean_ol_only = Caribbean_ol.drop('CTY', axis=1)
Caribbean_ol_only = Caribbean_ol_only.drop('RID', axis=1)
Caribbean_ol_only = Caribbean_ol_only.drop('#UNITS_L12Mo', axis=1)
Caribbean_ol_only = Caribbean_ol_only.drop('#TRANS_L12Mo', axis=1)

Caribbean_ol_only[Caribbean_ol_only < 0] = 0

plt.xlabel('Date')
plt.ylabel('Sales Caribe')
plt.plot( Caribbean_ol_only.T.loc['2018/09/03':'2020/02/29.1'] )

"""Extraemos Latinoamerica Central"""

Central_ol = sales_ol.loc[sales_ol['CTY'] == 'Central Region LATAM']

Central_ol_only = Central_ol.drop('CTY', axis=1)
Central_ol_only = Central_ol_only.drop('RID', axis=1)
Central_ol_only = Central_ol_only.drop('#UNITS_L12Mo', axis=1)
Central_ol_only = Central_ol_only.drop('#TRANS_L12Mo', axis=1)

Central_ol_only[Central_ol_only < 0] = 0

plt.xlabel('Date')
plt.ylabel('Sales Latinoamerica Central')
plt.plot( Central_ol_only.T.loc['2018/09/03':'2020/02/29.1'] )

"""Extraemos Chile"""

Chile_ol = sales_ol.loc[sales_ol['CTY'] == 'Chile']

Chile_ol_only = Chile_ol.drop('CTY', axis=1)
Chile_ol_only = Chile_ol_only.drop('RID', axis=1)
Chile_ol_only = Chile_ol_only.drop('#UNITS_L12Mo', axis=1)
Chile_ol_only = Chile_ol_only.drop('#TRANS_L12Mo', axis=1)

Chile_ol_only[Chile_ol_only < 0] = 0

plt.xlabel('Date')
plt.ylabel('Sales Chile')
plt.plot( Chile_ol_only.T.loc['2018/09/03':'2020/02/29.1'] )

"""Extraemos Colombia"""

Colombia_ol = sales_ol.loc[sales_ol['CTY'] == 'Colombia']

Colombia_ol_only = Colombia_ol.drop('CTY', axis=1)
Colombia_ol_only = Colombia_ol_only.drop('RID', axis=1)
Colombia_ol_only = Colombia_ol_only.drop('#UNITS_L12Mo', axis=1)
Colombia_ol_only = Colombia_ol_only.drop('#TRANS_L12Mo', axis=1)

Colombia_ol_only[Colombia_ol_only < 0] = 0

plt.xlabel('Date')
plt.ylabel('Sales Colombia')
plt.plot( Colombia_ol_only.T.loc['2018/09/03':'2020/02/29.1'] )

"""Extraemos Mexico"""

Mexico_ol = sales_ol.loc[sales_ol['CTY'] == 'Mexico']

Mexico_ol_only = Mexico_ol.drop('CTY', axis=1)
Mexico_ol_only = Mexico_ol_only.drop('RID', axis=1)
Mexico_ol_only = Mexico_ol_only.drop('#UNITS_L12Mo', axis=1)
Mexico_ol_only = Mexico_ol_only.drop('#TRANS_L12Mo', axis=1)

Mexico_ol_only[Mexico_ol_only < 0] = 0

plt.xlabel('Date')
plt.ylabel('Sales Mexico')
plt.plot( Mexico_ol_only.T.loc['2018/09/03':'2020/02/29.1'] )

"""Extraemos LATAM Sur"""

South_ol = sales_ol.loc[sales_ol['CTY'] == 'South Region LATAM']

South_ol_only = South_ol.drop('CTY', axis=1)
South_ol_only = South_ol_only.drop('RID', axis=1)
South_ol_only = South_ol_only.drop('#UNITS_L12Mo', axis=1)
South_ol_only = South_ol_only.drop('#TRANS_L12Mo', axis=1)

South_ol_only[South_ol_only < 0] = 0

plt.xlabel('Date')
plt.ylabel('Sales South')
plt.plot( South_ol_only.T.loc['2018/09/03':'2020/02/29.1'] )